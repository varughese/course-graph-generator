#!/usr/bin/env node

// Shoutout to Kyle Amoroso for making this as apart of our major-master project
// for 1530 - https://github.com/varughese/major-master/blob/master/scraper/prereq-cli

const fs = require('fs');
const parseAndUpdateCourse = require("./prereq-parser");
const { promptAndFixCourse } = require("./prereq-fixer");
const yargs = require('yargs').scriptName('prereq-cli');

// promisify callbacks
const readFile = (path, encoding='utf-8') => new Promise((resolve, reject) => {
  fs.readFile(path, encoding, (err, data) => err ? reject(err) : resolve(data));
});
const writeFile = (path, data) => new Promise((resolve, reject) => {
  fs.writeFile(path, data, (err) => err ? reject(err) : resolve());
});

// setup options
const { argv } = yargs
  .usage(
    'Usage: $0 input_file [-o output_file] [-fsu]\n'
    + '  output_file defaults to "course-req-parsed.json"'
  )
  .example(
    '$0 data.json -o courses.json -s 2',
    'Read course data from data.json, parse, and store in courses.json'
    + ' with indentation of 2'
  )
  .example(
    '$0 courses.json -fu',
    'Read course data from courses.json, parse, allow user to fix errors,'
    + ' and update courses.json'
  )
  .options({
    'f': {
      alias: 'fix-errors',
      description: 'Allow user to tweak prereq strings for reparsing',
      type: 'boolean'
    },
    'o': {
      description: 'Specify output_file',
      requiresArg: true,
      type: 'string'
    },
    's': {
      alias: 'spaces',
      description: 'Number of spaces to use as white space',
      requiresArg: true,
      type: 'number'
    },
    'u': {
      alias: 'update',
      default: undefined,
      description: 'Set output_file to input_file',
      type: 'boolean'
    }
  })
  .alias('h', 'help')
  .conflicts('o', 'u')
  .demandCommand(1, 1, 'You must provide an input_file to parse')
  .showHelpOnFail(false, 'Specify --help for available options')
  .version(false)
  .strict();

// read command line args
const [ pathIn ] = argv._;
const { fixErrors, spaces } = argv;
const pathOut = argv.update ? pathIn : argv.o || 'course-req-parsed.json';

startParser({ pathIn, pathOut })
  .catch(({ message }) => {
    console.error(message);
    process.exit(1);
  });

// read pathIn, parse prereqs, write pathOut, possible user intervention
async function startParser({ pathIn, pathOut }) {
  const data = JSON.parse(await readFile(pathIn));
  console.log(`${pathIn} read successfully`);
  
  const subjects = Object.keys(data);
  if (fixErrors) {
    await fixCourses(data);
  } else {
    subjects.forEach((subject) => {
      console.log("Parsing " + subject);
      data[subject] = parseCourses(data[subject]);
    })
  }

  await writeFile(pathOut, JSON.stringify(data, null, spaces));
  console.log(`${pathOut} written successfully`);
}

function parseCourses(courses) {
  if (!courses) return {};
  let errCount = 0;
  Object.keys(courses).forEach(async (classId) => {
    const course = courses[classId];
    errCount += parseAndUpdateCourse(course);
    delete course.prereq;
    delete course.coreq;
  });


  if(errCount > 0) {
    console.warn(`${errCount} prereq(s) failed to parse\n`);
  }
  return courses;
}

async function fixCourses(data) {
  console.log('Fix the following prerequisites:');
  console.log('(type skip or empty line to ignore):');
  if (!data) return {};
  let errCount = 0;
  for (subject in data) {
    const courses = data[subject];
    console.log("Fixing " + subject);
    for (classId in courses) {
      const course = courses[classId];
      await promptAndFixCourse(course);
    }
    // Rewrite after every subject to save progress
    await writeFile(pathOut, JSON.stringify(data, null, spaces));
    console.log(`~saved successfully~\n`);
  }

  if(errCount > 0) {
    console.warn(`${errCount} prereq(s) failed to parse\n`);
  }

  return data;
}